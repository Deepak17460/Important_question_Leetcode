// Using Bfs & dfs Technique//
 It is giving tle in this code
 
 class Solution 
{
public:
    // DFS function to find out every possible path
    void dfs(unordered_map<string,vector<string>>&m,vector<vector<string>>&ans,vector<string>tmp,string node,string end)
    {
        tmp.push_back(node);
        if(node==end)
        {
            ans.push_back(tmp);
            return;
        }
        for(auto it:m[node])
        {
            dfs(m,ans,tmp,it,end);
        }
    }
    vector<vector<string>>findLadders(string begin,string end,vector<string>&word) 
    {
        unordered_set<string>dict(word.begin(),word.end()); // for faster lookup
        // If the endWord doesn't exist in the list then return an emty list.
        if(dict.find(end)==dict.end())
        {
            return {};
        }
        vector<vector<string>>ans; // For storing the answer
        unordered_map<string,int>dist; // for stroing the level in graph
        queue<string>q; // for BFS
        unordered_map<string,vector<string>>m; // adjacency list 
        q.push(begin);   // start with the beginWord 
        dist[begin]=1;   // the beginWord is always at the level = 1
        while(!q.empty())
        {
            string node=q.front();
            q.pop();
            // If we've found the endWord the we can break
            if(node==end)
            {
                break;
            }
            else
            {
                for(int i=0;i<node.length();i++)
                {
                    string newWord=node;
                    // try to fill with all the alphabets 
                    for(char c='a';c<='z';c++)
                    {
                        newWord[i]=c;
                        // If the newWord is present in the list then add the edge
                        if(dict.find(newWord)!=dict.end())
                        {
                            if(dist.find(newWord)==dist.end())
                            {
                                q.push(newWord); // push it to the queue
                                dist[newWord]=dist[node]+1; //update the level
                                m[node].push_back(newWord); // add the edge 
                            }
                            else if(dist[newWord]==dist[node]+1)
                            {
                                m[node].push_back(newWord);
                            }
                        }
                    }
                }
            }
        }
        // If endWord is not included in the graph finally then return an empty list
        if(dist.find(end)==dist.end())
        {
            return {};
        }
        // apply dfs to find out every possible path.
        dfs(m,ans,{},begin,end);
        return ans;
    }
};

Correction of this code:-

class Solution {
public:
   vector<int>* precursor;
	vector<vector<string>> res;
	bool isANeighbor(string& s1, string& s2) {
		bool hasChanged = false;
		for (int i = 0; i < s1.size(); i++) {
			if (s1[i] != s2[i]) {
				if (hasChanged)
					return false;
				else
					hasChanged = true;
			}
		}
		return true;
	}
	void generateRoute(vector<string> right, vector<int>& precursor2, vector<string>& wordList) {
		if (precursor2.size() == 0) {
			res.push_back(right);
			return;
		}
		vector<string> copy;
		for (int i = 0; i < precursor2.size(); i++) {
			copy = right;
			// insert before the begin() cause we are back-tracing.
			copy.insert(copy.begin(), wordList[precursor2[i]]);
			generateRoute(copy, precursor[precursor2[i]], wordList);
		}
	
	}
	vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
		wordList.push_back(beginWord);
		int size = wordList.size();
		vector<int>* neighbors = new vector<int>[size];
		int ewordindex = -1;
		for (int i = 0; i < size; i++) {
			if (wordList[i] == endWord)
				ewordindex = i;
			for (int j = i + 1; j < size; j++) {
				if (isANeighbor(wordList[i],wordList[j])) {
					neighbors[i].push_back(j);
					neighbors[j].push_back(i);
				}
			}
		}
		vector<int> steps(size);//memorize distances
		queue<int> line;//BFS
		steps[size - 1] = 1;
		line.push(size - 1);//add the index of the beginWord to the queue
		precursor = new vector<int>[size];
		while (!line.empty()) {
			int pos = line.front();
			line.pop();
			if (wordList[pos] == endWord)
				//we stop here because we are looking for the shortest routes
				break;
			for (int i = 0; i < neighbors[pos].size(); i++) {
				if (steps[neighbors[pos][i]]==0) {
					//we have never visited here
					steps[neighbors[pos][i]] = steps[pos] + 1;
					precursor[neighbors[pos][i]].push_back(pos);
					line.push(neighbors[pos][i]);
				}
				else if (steps[neighbors[pos][i]] == steps[pos] + 1)
					//there's another route to get here and it has the SAME distance
					precursor[neighbors[pos][i]].push_back(pos);
			}
		
		}
		if (ewordindex == -1 || steps[ewordindex] == 0)
			return res;
		vector<string> right{endWord};
		generateRoute(right,precursor[ewordindex] , wordList);
		return res;
    }
};



